{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preparation: Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Label- und One-Hot-Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 3, 1, 2], dtype=int64)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "\n",
    "# Categories\n",
    "categories = np.array(['apple', 'apple', 'milk', 'banana', 'coffee'])\n",
    "\n",
    "# Creating instance of labelencoder\n",
    "labelencoder = LabelEncoder()\n",
    "\n",
    "# Label encoding\n",
    "label_encoded = labelencoder.fit_transform(categories)\n",
    "label_encoded"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating instance of one-hot-encoder\n",
    "ohe = OneHotEncoder(handle_unknown='ignore')\n",
    "\n",
    "# One Hot Encoding with numerical labels\n",
    "ohe.fit_transform(label_encoded.reshape(-1, 1)).toarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., 0.],\n",
       "       [1., 0., 0., 0.],\n",
       "       [0., 0., 0., 1.],\n",
       "       [0., 1., 0., 0.],\n",
       "       [0., 0., 1., 0.]])"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One Hot Encoding with string labels\n",
    "enc.fit_transform(categories.reshape(-1, 1)).toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Hashing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1., -2.,  1.,  0.,  1.],\n",
       "       [ 1., -2.,  1.,  0.,  1.],\n",
       "       [ 0., -1.,  1.,  0.,  0.],\n",
       "       [ 3., -1.,  0.,  0., -2.],\n",
       "       [ 0.,  0., -1.,  3.,  2.]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.feature_extraction import FeatureHasher\n",
    "\n",
    "# Create instance of feature hasher\n",
    "fh = FeatureHasher(input_type='string', n_features=5)\n",
    "\n",
    "# Feature hashing\n",
    "hash_encoded = fh.transform(categories).toarray()\n",
    "hash_encoded"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bag of Words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1, 1, 1, 0, 0, 1, 0, 1],\n",
       "       [0, 1, 0, 1, 0, 2, 1, 0, 1],\n",
       "       [1, 0, 0, 0, 1, 0, 1, 1, 0],\n",
       "       [0, 1, 1, 1, 0, 0, 1, 0, 1]], dtype=int64)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "# Our documents\n",
    "corpus = [\n",
    "        'This is the first document.',\n",
    "        'This is the second second document.',\n",
    "        'And the third one.',\n",
    "        'Is this the first document?',\n",
    "        ]\n",
    "\n",
    "# Create instance\n",
    "vectorizer = CountVectorizer()\n",
    "\n",
    "# Count words\n",
    "count_vectors = vectorizer.fit_transform(corpus)\n",
    "count_vectors.toarray()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Einfache Feature Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.13888889, 0.22222222, 0.25      ])"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.feature_selection import VarianceThreshold\n",
    "\n",
    "# Data\n",
    "X = np.array([[0, 0, 1],\n",
    "              [0, 1, 0], \n",
    "              [1, 0, 0],\n",
    "              [0, 1, 1],\n",
    "              [0, 1, 0],\n",
    "              [0, 1, 1]])\n",
    "\n",
    "# Variance\n",
    "X.var(axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0, 1],\n",
       "       [1, 0],\n",
       "       [0, 0],\n",
       "       [1, 1],\n",
       "       [1, 0],\n",
       "       [1, 1]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select features based on variance threshold\n",
    "sel = VarianceThreshold(threshold=.15)\n",
    "sel.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SelectKBest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1797, 64)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.datasets import load_digits\n",
    "from sklearn.feature_selection import SelectKBest, mutual_info_classif\n",
    "\n",
    "# Data\n",
    "X, y = load_digits(return_X_y=True)\n",
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1797, 20)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Select k best\n",
    "X_new = SelectKBest(mutual_info_classif, k=20).fit_transform(X, y)\n",
    "X_new.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Scaling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Quantisierung: feste Klassengrößen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Simulating data similar to \n",
    "data = np.random.lognormal(size=(100_000, 1))\n",
    "df = pd.DataFrame(data)\n",
    "df = df[df <= 20] * 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.hist(bins=100)\n",
    "plt.title('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.LineCollection at 0x22a86950910>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=100)\n",
    "plt.title('')\n",
    "plt.vlines([10, 100, 1000, 10_000], ymin=0, ymax=1.5e4, color='r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.random.uniform(size=(10_000, 1))\n",
    "df = pd.DataFrame(data) * 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '')"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=100)\n",
    "plt.title('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, '')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=100)\n",
    "plt.vlines([10, 20, 30, 40, 50, 60, 70, 80, 90], ymin=0, ymax=150, color='r')\n",
    "plt.title('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adaptive Klassengrößen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = np.random.normal(size=(100_000, 1))\n",
    "df = pd.DataFrame(data)\n",
    "df = df[df <= 20] * 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<AxesSubplot:title={'center':'0'}>]], dtype=object)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.hist(bins=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.LineCollection at 0x22a88736af0>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "deziles = df.quantile([.1, .2, .3, .4, .5, .6, .7, .8, .9])\n",
    "df.hist(bins=100)\n",
    "plt.vlines(deziles, ymin=0, ymax=3600, color='r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MinMax-Transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data\n",
    "X = np.random.randn(10, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MinMax Transformation from scratch\n",
    "max_value = 5\n",
    "min_value = -3\n",
    "X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))\n",
    "X_scaled = X_std * (max_value - min_value) + min_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-3.        ,  0.85069975, -2.70624939,  3.87470955, -0.183676  ],\n",
       "       [ 1.54008012,  1.33708964, -1.95148627, -0.08990921,  4.34268273],\n",
       "       [-0.73706458, -0.14974669,  5.        ,  2.706222  , -3.        ],\n",
       "       [-1.66715126, -1.55167259,  2.03344608,  5.        ,  2.41946494],\n",
       "       [ 0.43491603,  1.36350365,  3.67027548, -3.        , -0.03696719],\n",
       "       [ 5.        ,  5.        ,  1.86938674,  2.84684073,  4.06816979],\n",
       "       [ 2.64695735, -3.        ,  2.94402578, -0.21902062, -0.12294442],\n",
       "       [ 1.21055725,  2.07157658, -3.        , -1.95407969,  5.        ],\n",
       "       [ 4.39882078,  4.08706027,  2.13177497,  4.78663845,  2.07334575],\n",
       "       [ 2.78077852, -0.97701158,  1.3060479 ,  1.73185018,  3.79276447]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# MinMax Scaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler(feature_range=(min_value, max_value))\n",
    "scaler.fit_transform(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standardisierung"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.5366466358055808\n",
      "0.2882643838253411\n"
     ]
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Data\n",
    "X = np.random.rand(200, 1)\n",
    "\n",
    "# Mean, std\n",
    "print(X.mean())\n",
    "print(X.std())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.9539925233402755e-16\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# Scale\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(X)\n",
    "\n",
    "# Mean, std\n",
    "print(X.mean())\n",
    "print(X.std())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Power Transformations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import\n",
    "from sklearn.preprocessing import PowerTransformer\n",
    "\n",
    "# Data\n",
    "X = np.random.lognormal(size=(2000, 1))\n",
    "\n",
    "# Histogram\n",
    "plt.hist(X, bins=100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "array([0.02305204])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transform\n",
    "pt = PowerTransformer(method='box-cox')\n",
    "X = pt.fit_transform(X)\n",
    "\n",
    "# Histogram\n",
    "plt.hist(X, bins=100)\n",
    "plt.show()\n",
    "\n",
    "# Box-Cox parameter\n",
    "pt.lambdas_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  },
  "toc-autonumbering": true
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
